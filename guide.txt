 
 
General commands
npm start -s

créate .editorconfig edit config file from www.editorconfig.org 

Package Management(NPM)
create package.json FROM bit.ly/jsdevpackagejson copy and paste file
run command  npm install
npm audit --audit-level high 
create repository github
add .gitignore into the project and add node_module

Development Web Server(http-server, budo, Express, KOA, hapi,)
npm install express(in case is not in package.json)
create:
			 BuildScript folder ,  srcServer.js, startMessage.js file
             src folder, index.html file
node buildScripts/srcServer.js <- run ->

SHARING WORK IN PROGRESS(Browsersync, localtunnel, now, surge, ngrok)
npm install localtunnel –g
lt –port 3000 –subdomain <name  domain>
ctrl + c to stop sharing

Automation(NPM scripts, Grunt, )
go to package.json
add “script”: { 
“prestart”: “node <name file js>” add inside script
“start”: “node <name file js>” add inside script
}
npm start -s <- run ->
 “start”: “npm-run-all –parallel node  <name file js>  node <name file js> etc” Recommendation: to run in parallel add inside "start" script

Transpalling(Babel, typescript, Elm)
create .babelrc file
{
    "presets": ["latest"]
  }
go to package.json 
“prestart”: “babel-node <name file js>” add babel prefix in each node command

Bundling(browserify, webpack, rollup, jspm )
create webpack.config.dev.js download file from bit.ly/2dSZwea

Linters(JSLint, JSHint, ESLint)
create .eslintrc.json copy file from bit.ly/jsdeveslint
package.json set “lint” script
npm run lint     
/* eslint-disable no-console */ to disable lint rule in whole file
// eslint-disable-line no-console to disable lint rule in the line
“lint:watch”: “npm run lint -- --watch” to automatically run script lint 

Testing(Mocha, Jasmine, Tape, QUnit, Ava, Jest)
Choose  a set of testing tool
Mocha 
Chai assertion librery cus mocha dosent have
jsdom helper librery to test html in memory DOM
create testSetup.js
package.json create "test" script 
create test file index.test.js:  import next libreries
	import {expect} from 'chai';
	import fs from 'fs';
	import jsdom from 'jsdom';
create test cases
run npm test 
add "test:watch": "npm run test -- --watch"


Consejos 
no se aburmen por los comandos muchos de ellos o solo los van a ejecutar una vez o se repiten mucho






