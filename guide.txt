 NPM www.npmjs.com/
 npm i node 						<- INSTALL NODE STRUCTURE
 npm init 							<- CREATE package.json
 npm install <package name> 		<- ADD PACKAGE
 npm install <git url> 				<- ADD PACKAGE FROM GIT ADD --save for externous ERR
 npm install <gist:hashcode> 		<- ADD PACKAGE FROM GIST  --save for externous ERR
 npm install <path> 				<- ADD PACKAGE FROM LOCAL FOLDER  --save for externous ERR
 npm install <package name> -g		<- ADD PACKAGE GLOBALLY
 npm update <package name> -g 		<-  UPDATE GLOBALLY DEPENDENCIE
 npm i npm@latest -g 				<- EXECUTE THIS IN WINDOWS SHELL PROMPT C:\Windows\system32
 npm list -g --depth 0 				<- GET GLOBAL DEPENDENCIS
 
 Started kit
 Packagem
 
General commands
npm start -s

créate .editorconfig edit config file from www.editorconfig.org 

Package Management(NPM)
create package.json FROM bit.ly/jsdevpackagejson copy and paste file
run command  npm install
npm audit --audit-level high 
create repository github
add .gitignore into the project and add node_module

Development Web Server(http-server, budo, Express, KOA, hapi,)
npm install express(in case is not in package.json)
create:
			 BuildScript folder ,  srcServer.js, startMessage.js file
             src folder, index.html file
node buildScripts/srcServer.js <- run ->

SHARING WORK IN PROGRESS(Browsersync, localtunnel, now, surge, ngrok)
npm install localtunnel –g
lt –port 3000 –subdomain <name  domain>
ctrl + c to stop sharing

Automation(NPM scripts, Grunt, )
go to package.json
add “script”: { 
“prestart”: “node <name file js>” add inside script
“start”: “node <name file js>” add inside script
}
npm start -s <- run ->
 “start”: “npm-run-all –parallel node  <name file js>  node <name file js> etc” Recommendation: to run in parallel add inside "start" script

Transpalling(Babel, typescript, Elm)
create .babelrc file
{
    "presets": ["latest"]
  }
go to package.json 
“prestart”: “babel-node <name file js>” add babel prefix in each node command

Bundling(browserify, webpack, rollup, jspm )
create webpack.config.dev.js to create a the config file refer to https://webpack.js.org/configuration and https://createapp.dev/webpack 
srcServer.js add:
	import webpack from 'webpack';
	import config from '../webpack.config.dev';
	const compiler = webpack(config);
	app.use webpack-dev-middleware function
add <script src="bundle.js"> </script> in the html 

Linters(JSLint, JSHint, ESLint)
create .eslintrc.json copy file from bit.ly/jsdeveslint
package.json set “lint” script
npm run lint     
/* eslint-disable no-console */ to disable lint rule in whole file
// eslint-disable-line no-console to disable lint rule in the line
“lint:watch”: “npm run lint -- --watch” to automatically run script lint 

Testing(Mocha, Jasmine, Tape, QUnit, Ava, Jest)
Choose  a set of testing tool
Mocha 
Chai assertion librery cus mocha dosent have
jsdom helper librery to test html in memory DOM
create testSetup.js
package.json create "test" script 
create test file index.test.js:  import next libreries
	import {expect} from 'chai';
	import fs from 'fs';
	import jsdom from 'jsdom';
create test cases
run npm test 
add "test:watch": "npm run test -- --watch"

Continuos Integration(Travis Appveyor Jenkins CircleCI Semaphore SnapCI)
create .travis.yml for MAC
go to ci.appveyor.com add project
create appveyor.yml for Window
verify check yml file here -> http://yaml-online-parser.appspot.com/

HTTP Call
create buildScripts/srcServer.js here is the enpoint ENPOINT
	add get method to connect with the backend data(bd)
create folder 'api' inside 'src' 
create baseUrl.js : server, db , mock server address, example: 'http://localhost:3004/'
	add function and export to return string
create src/api/userApi.js
	add import 'whatwg-fetch';
	import getBaseUrl from './baseUrl';
	add fetch method
create src/index.js  
	import  {getUsers} from './api/userApi'; 
	use getUser()
create index.js:
	import {function} from './api/userApi'
	add get or post function retrive the information and handle it whatever you want.
 
Mock
Schema:
create buildScripts/mockDataSchema.js from bit.ly/ps-mock-data-schema 
Mock Data
create buildScripts/generateMockData.js
	import jsf from 'json-schema-faker';
	import {schema} from './mockDataSchema';
	import fs from 'fs';
	import chalk from 'chalk';
"generate-mock-data": "babel-node ./buildScripts/generateMockData" add script 
"prerestart-mockapi": "npm run generate-mock-data"    generate random data always before up the mockapi server
"start-mockapi": "json-server --watch ./src/api/db.json --port 3001"   raise a server with json objects and random data
"start": "start-mockapi" 


Prodution Build
-Production webpack set env
-configure toogle mock api
-Dynamic html generation
create web.pack.config.prod.js
	add source-map
	add dist in the output
    add plugins       
        new webpackConfigDev.optimize.DedupePlugin()  Eliminate duplicate packages when generating bundle expired plugin!!
        new webpackConfigDev.optimize.UglyfyJsPlugin()   Manify JS  expired plugin!!
		HtmlWebpackPlugin Create HTML file that includes reference to bundled JS.
			remove script bundle.js from html file
create ./buildScripts/build.js
create ./buildScripts/disServer.js
add next scripts:
    "clean-dist": "rimraf ./dist && mkdir dist",
    "prebuild": "npm-run-all clean-dist test lint",
    "build": "babel-node buildScripts/build.js",
    "postbuild": "babel-node buildScripts/distServer.js"
modify baseUrl and create getQueryStringParameterByName() method
-Bundle splitting
modify webpack.config.prod.js	
	add vendor in entry 
	add plugin webpack.optimize.CommonsChunkPlugin
create v./src/api/vendor.js
	add all depndencies and imports in your project in ordert to avoid reload depndendencies




Debug






importante 
get a  big picture of the pricipal tools
package.json
	scripts
		pre & pos
webpack
set Debug
 

Consejos 
no se aburmen por los comandos muchos de ellos o solo los van a ejecutar una vez o se repiten mucho
CRE

al ser opensrouce los cursos y librerias estan en cosntante cambio es importante actualizarse.
Utilizar librerias con la mejor documentacion.


remove from .config all temp files "C:\Users\f.oviedo.maltez\.config\configstore"




